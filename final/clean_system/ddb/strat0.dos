/*
 * Strategy 0: Simple Streaming Buy/Sell Pattern
 * Description: Buy 1 lot ‚Üí 5 seconds later sell 1 lot ‚Üí 5 seconds later buy 1 lot (repeat)
 * 
 * This strategy demonstrates streaming execution with time-based triggers
 * Pattern: BUY ‚Üí wait 5s ‚Üí SELL ‚Üí wait 5s ‚Üí BUY ‚Üí wait 5s ‚Üí SELL...
 */

print("=== Strategy 0: Streaming Buy/Sell Pattern ===")

// Initialize strategy 0 state as a shared table
share table(1:0, `key`value, [STRING, STRING]) as strat0State
insert into strat0State values("current_position", "0")
insert into strat0State values("last_signal_time", "1900.01.01T00:00:00.000")

// Create strategy 0 signals table
share table(10000:0, `time`symbol`signal`position`strategy_id, 
           [TIMESTAMP, SYMBOL, STRING, INT, INT]) as strat0Signals

// Strategy 0 market data handler - SIMPLIFIED REAL IMPLEMENTATION
def strat0MarketHandler(msg) {
    print("üîç Strategy 0: Processing " + string(size(msg)) + " market data records")
    
    // SIMPLIFIED: Generate signals for every 5th market data record
    for (i in 0..(size(msg)-1)) {
        currentTime = msg.time[i]
        symbol = msg.symbol[i]
        price = msg.close[i]
        
        // Simple pattern: Every 5th record alternates BUY/SELL
        signalCount = exec count(*) from strat0Signals
        
        if (signalCount % 5 == 0) {  // Every 5th record
            if (signalCount % 10 == 0) {
                // Generate BUY signal
                insert into strat0Signals values(currentTime, symbol, "BUY_SIGNAL", 1, 0)
                print("üéØ Strategy 0: BUY signal for " + string(symbol) + " at " + string(currentTime))
            } else {
                // Generate SELL signal
                insert into strat0Signals values(currentTime, symbol, "SELL_SIGNAL", 1, 0)
                print("üéØ Strategy 0: SELL signal for " + string(symbol) + " at " + string(currentTime))
            }
        }
    }
}

// Subscribe to unified market data with unique action name
def subscribeToUnifiedMarketData0() {
    maxRetries = 10
    retryCount = 0
    
    do {
        try {
            subscribeTable(tableName="unifiedMarketData", actionName="strat0_unified_subscription",
                          handler=strat0MarketHandler, msgAsTable=true)
            print("‚úÖ Strategy 0 subscribed to unifiedMarketData")
            return true
        } catch(ex) {
            retryCount += 1
            print("‚ö†Ô∏è Strategy 0 Attempt " + string(retryCount) + "/10 - unifiedMarketData not ready: " + ex)
            if (retryCount < maxRetries) {
                sleep(1000)  // Wait 1 second before retry
            }
        }
    } while (retryCount < maxRetries)
    
    print("‚ùå Strategy 0 failed to subscribe to unifiedMarketData")
    return false
}

// Subscribe to unified market data (will be called manually after table setup)
// subscriptionSuccess = subscribeToUnifiedMarketData0()

// if (subscriptionSuccess) {
//     print("‚úÖ Strategy 0 is now receiving real-time unified market data")
// } else {
//     print("‚ö†Ô∏è Strategy 0 will wait for unified market data to become available")
// }
print("‚úÖ Strategy 0 subscription function ready - will be activated manually")

print("Strategy 0: Market data processor created")
print("Strategy 0: Pattern - BUY 1 lot ‚Üí 5s ‚Üí SELL 1 lot ‚Üí 5s ‚Üí repeat")
print("Strategy 0: Initialization completed")

print("‚úÖ Strategy 0 setup completed - streaming buy/sell pattern active")
print("Pattern: Generates BUY/SELL signals every 5 seconds")