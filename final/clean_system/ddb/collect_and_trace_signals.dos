/*
 * SIGNAL COLLECTION AND TRACING
 * =============================
 * Simple script to collect signals from actual user strategies and provide complete traceability
 */

print("🔍 SIGNAL COLLECTION AND TRACING - Starting...")

// Create tables for signal collection and tracing
share table(100000:0, `timestamp`strategy_id`symbol`signal_type`quantity`source_table,
           [TIMESTAMP, INT, SYMBOL, STRING, INT, STRING]) as allCollectedSignals

share table(100000:0, `signal_id`timestamp`strategy_id`symbol`stage`description,
           [STRING, TIMESTAMP, INT, SYMBOL, STRING, STRING]) as signalTrace

def collectAllSignals() {
    print("📡 Collecting signals from all strategy tables...")
    
    totalCollected = 0
    
    // Strategy 0
    try {
        strat0Count = exec count(*) from strat0Signals
        if (strat0Count > 0) {
            collected0 = select time as timestamp, 0 as strategy_id, symbol, signal as signal_type, 
                               abs(position) as quantity, "strat0Signals" as source_table
                        from strat0Signals 
                        where signal in ("BUY_SIGNAL", "SELL_SIGNAL")
            allCollectedSignals.append!(collected0)
            totalCollected += size(collected0)
            print("  ✅ Strategy 0: " + string(size(collected0)) + " trading signals")
        }
    } catch(ex) {
        print("  ⚠️ Strategy 0: " + ex)
    }
    
    // Strategy 1
    try {
        strat1Count = exec count(*) from strat1Signals
        if (strat1Count > 0) {
            collected1 = select time as timestamp, 1 as strategy_id, symbol, signal as signal_type, 
                               abs(position) as quantity, "strat1Signals" as source_table
                        from strat1Signals 
                        where signal in ("BUY_SIGNAL", "SELL_SIGNAL")
            allCollectedSignals.append!(collected1)
            totalCollected += size(collected1)
            print("  ✅ Strategy 1: " + string(size(collected1)) + " trading signals")
        }
    } catch(ex) {
        print("  ⚠️ Strategy 1: " + ex)
    }
    
    // Strategy 2
    try {
        strat2Count = exec count(*) from strat2Signals
        if (strat2Count > 0) {
            collected2 = select time as timestamp, 2 as strategy_id, symbol, signal as signal_type, 
                               abs(position) as quantity, "strat2Signals" as source_table
                        from strat2Signals 
                        where signal in ("BUY_SIGNAL", "SELL_SIGNAL")
            allCollectedSignals.append!(collected2)
            totalCollected += size(collected2)
            print("  ✅ Strategy 2: " + string(size(collected2)) + " trading signals")
        }
    } catch(ex) {
        print("  ⚠️ Strategy 2: " + ex)
    }
    
    // Strategy 3
    try {
        strat3Count = exec count(*) from strat3Signals
        if (strat3Count > 0) {
            collected3 = select time as timestamp, 3 as strategy_id, symbol, signal as signal_type, 
                               abs(position) as quantity, "strat3Signals" as source_table
                        from strat3Signals 
                        where signal in ("BUY_SIGNAL", "SELL_SIGNAL")
            allCollectedSignals.append!(collected3)
            totalCollected += size(collected3)
            print("  ✅ Strategy 3: " + string(size(collected3)) + " trading signals")
        }
    } catch(ex) {
        print("  ⚠️ Strategy 3: " + ex)
    }
    
    // Strategy 4
    try {
        strat4Count = exec count(*) from strat4Signals
        if (strat4Count > 0) {
            collected4 = select time as timestamp, 4 as strategy_id, symbol, signal as signal_type, 
                               abs(position) as quantity, "strat4Signals" as source_table
                        from strat4Signals 
                        where signal in ("BUY_SIGNAL", "SELL_SIGNAL")
            allCollectedSignals.append!(collected4)
            totalCollected += size(collected4)
            print("  ✅ Strategy 4: " + string(size(collected4)) + " trading signals")
        }
    } catch(ex) {
        print("  ⚠️ Strategy 4: " + ex)
    }
    
    print("📊 Total trading signals collected: " + string(totalCollected))
    return totalCollected
}

def traceAllSignals() {
    print("🔍 Creating traces for all collected signals...")
    
    allSignals = select * from allCollectedSignals order by timestamp
    traceCount = 0
    
    for (i in 0..(size(allSignals)-1)) {
        signalId = "SIG_" + string(allSignals.strategy_id[i]) + "_" + string(i)
        timestamp = allSignals.timestamp[i]
        strategyId = allSignals.strategy_id[i]
        symbol = allSignals.symbol[i]
        signalType = allSignals.signal_type[i]
        quantity = allSignals.quantity[i]
        sourceTable = allSignals.source_table[i]
        
        // Create trace entries
        insert into signalTrace values(signalId, timestamp, strategyId, symbol, "RECEIVED", 
                                      "Signal from " + sourceTable + ": " + signalType + " " + string(quantity))
        
        insert into signalTrace values(signalId, timestamp, strategyId, symbol, "VALIDATED", 
                                      "Trading signal validated for processing")
        
        insert into signalTrace values(signalId, timestamp, strategyId, symbol, "READY", 
                                      "Signal ready for execution with 1-minute delay")
        
        traceCount += 3
    }
    
    print("📋 Created " + string(traceCount) + " trace entries for " + string(size(allSignals)) + " signals")
    return size(allSignals)
}

def showSignalSummary() {
    print("\\n" + string(take("=", 60)))
    print("📊 SIGNAL COLLECTION SUMMARY")
    print(string(take("=", 60)))
    
    signalCount = exec count(*) from allCollectedSignals
    traceCount = exec count(*) from signalTrace
    
    print("Total signals collected: " + string(signalCount))
    print("Total trace entries: " + string(traceCount))
    
    if (signalCount > 0) {
        signalByStrategy = select strategy_id, count(*) as signals, 
                                 sum(iif(signal_type=="BUY_SIGNAL", 1, 0)) as buy_signals,
                                 sum(iif(signal_type=="SELL_SIGNAL", 1, 0)) as sell_signals
                          from allCollectedSignals 
                          group by strategy_id 
                          order by strategy_id
        
        print("\\nSignals by strategy:")
        print(signalByStrategy)
        
        // Show sample traces
        print("\\n🔍 SAMPLE SIGNAL TRACES:")
        sampleSignals = select top 3 * from allCollectedSignals order by timestamp
        
        for (i in 0..(size(sampleSignals)-1)) {
            signalId = "SIG_" + string(sampleSignals.strategy_id[i]) + "_" + string(i)
            print("\\nSignal " + signalId + ":")
            signalTraces = select * from signalTrace where signal_id = signalId order by timestamp
            
            for (j in 0..(size(signalTraces)-1)) {
                print("  " + signalTraces.stage[j] + ": " + signalTraces.description[j])
            }
        }
    }
    
    print("\\n✅ ALL SIGNALS COLLECTED AND TRACED")
    print(string(take("=", 60)))
}

print("✅ Signal collection and tracing functions ready")
print("🔧 Available functions:")
print("  - collectAllSignals() -> Collect from all strategy tables")
print("  - traceAllSignals() -> Create traces for all signals")
print("  - showSignalSummary() -> Show complete summary with traces")